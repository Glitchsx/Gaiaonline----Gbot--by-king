% mechanize -- Forms

<span class="docwarning">This documentation is in need of reorganisation!</span>

This page is the old ClientForm documentation.  ClientForm is now part of
mechanize, but the documentation hasn't been fully updated to reflect that:
what's here is correct, but not well-integrated with the rest of the
documentation.  This page deals with HTML form handling: parsing HTML forms,
filling them in and returning the completed forms to the server.  See the
[front page](./) for how to obtain form objects from a `mechanize.Browser`.

Simple working example (`examples/forms/simple.py` in the source distribution):

~~~~{.python}
@("".join(open("../examples/forms/simple.py").readlines()[2:]))
~~~~

A more complicated working example (from `examples/forms/example.py` in the
source distribution):

~~~~{.python}
@("".join(open("../examples/forms/example.py").readlines()[2:]))
~~~~

All of the standard control types are supported: `TEXT`, `PASSWORD`, `HIDDEN`,
`TEXTAREA`, `ISINDEX`, `RESET`, `BUTTON` (`INPUT TYPE=BUTTON` and the various
`BUTTON` types), `SUBMIT`, `IMAGE`, `RADIO`, `CHECKBOX`, `SELECT`/`OPTION` and
`FILE` (for file upload).  Both standard form encodings
(`application/x-www-form-urlencoded` and `multipart/form-data`) are supported.

The module is designed for testing and automation of web interfaces, not for
implementing interactive user agents.

***Security note*: Remember that any passwords you store in `HTMLForm`
instances will be saved to disk in the clear if, for example, you
[pickle](http://docs.python.org/library/pickle.html) them.**


Parsers
-------

There are two parsers.

TODO: more!

See also the FAQ entries on [XHTML](faq.html#xhtml) and [parsing bad
HTML](./faq.html#parsing).


Backwards-compatibility mode
----------------------------

mechanize (and ClientForm 0.2) includes three minor backwards-incompatible
interface changes from ClientForm version 0.1.

To make upgrading from ClientForm 0.1 easier, and to allow me to stop
supporting version ClientForm 0.1 sooner, there is support for operating in a
backwards-compatible mode, under which code written for ClientForm 0.1 should
work without modification.  This is done on a per-`HTMLForm` basis via the
`.backwards_compat` attribute, but for convenience the `ParseResponse()` and
`ParseFile()` factory functions accept `backwards_compat` arguments.  These
backwards-compatibility features will be removed soon.  The default is to
operate in backwards-compatible mode.  To run with backwards compatible mode
turned ***OFF*** (**strongly recommended**):

~~~~{.python}
from mechanize import ParseResponse, urlopen
forms = ParseResponse(urlopen("http://example.com/"), backwards_compat=False)
# ...
~~~~

The backwards-incompatible changes are:

  * Ambiguous specification of controls or items now results in AmbiguityError.
    If you want the old behaviour, explicitly pass `nr=0` to indicate you want
    the first matching control or item.

  * Item label matching is now done by substring, not by strict string-equality
    (but note leading and trailing space is always stripped). (Control label
    matching is always done by substring.)

  * Handling of disabled list items has changed.  First, note that handling of
    disabled list items in ClientForm 0.1 (and in ClientForm 0.2's
    backwards-compatibility mode!) is buggy: disabled items are successful
    (ie. disabled item names are sent back to the server).  As a result, there
    was no distinction to be made between successful items and selected items.
    In ClientForm 0.2, the bug is fixed, so this is no longer the case, and it
    is important to note that list controls' `.value` attribute contains only
    the *successful* item names; items that are *selected* but not successful
    (because disabled) are not included in `.value`.  Second, disabled list
    items may no longer be deselected: AttributeError is raised in ClientForm
    0.2, whereas deselection was allowed in ClientForm 0.1.  The bug in
    ClientForm 0.1 and in ClientForm 0.2's backwards-compatibility mode will
    not be fixed, to preserve compatibility and to encourage people to upgrade
    to the new ClientForm 0.2 `backwards_compat=False` behaviour.


<!-- Local Variables: -->
<!-- fill-column:79 -->
<!-- End: -->
